- name: Verify
  hosts: all
  gather_facts: yes
  tasks:
    - name: Check if /etc/hosts contains the domain
      ansible.builtin.command: grep 'ip.srv' /etc/hosts
      register: grep_result
      changed_when: false
      failed_when: grep_result.rc != 0

    - name: Test if the domain is pingable
      ansible.builtin.ping:
        data: ip.srv
      register: ping_result
      failed_when: ping_result.ping != "pong"

    - name: Check /mnt/ directory exists and properties
      ansible.builtin.stat:
        path: /mnt/
      register: mnt_stat

    - name: Assert /mnt/ directory exists
      ansible.builtin.assert:
        that:
          - mnt_stat.stat.exists
          - mnt_stat.stat.isdir
          - mnt_stat.stat.mode == '0775'
          - mnt_stat.stat.pw_name == "{{ user }}"
          - mnt_stat.stat.gr_name == 'luki'
      vars:
        user: "{{ lookup('env', 'USER') }}"

    - name: Get sysctl value for net.ipv4.ip_unprivileged_port_start
      ansible.builtin.command: sysctl net.ipv4.ip_unprivileged_port_start
      register: sysctl_value
      changed_when: false

    - name: Assert sysctl value is 80
      ansible.builtin.assert:
        that:
          - sysctl_value.stdout == 'net.ipv4.ip_unprivileged_port_start = 80'

    - name: Verify user exists
      ansible.builtin.command: getent passwd {{ user }}
      register: user_exists
      failed_when: >
        user_exists.rc != 0
      changed_when: false

    - name: Verify user's shell
      ansible.builtin.command: getent passwd {{ user }}
      register: user_shell
      failed_when: >
        not user_shell.stdout | regex_search('/bin/bash')
      changed_when: false

    - name: Verify user's home directory
      ansible.builtin.stat:
        path: "/home/{{ user }}"
      register: home_dir
      failed_when: >
        not home_dir.stat.exists or not home_dir.stat.isdir

    - name: Verify user's group
      ansible.builtin.command: getent group {{ 'wheel' if ansible_os_family == 'RedHat' else 'sudo' }}
      register: user_group
      failed_when:
        - user_group.rc != 0
        - not user_group.stdout | regex_search('{{ user }}')
      changed_when: false

    - name: Verify SSH key in authorized_keys
      ansible.builtin.stat:
        path: "/home/{{ user }}/.ssh/authorized_keys"
      register: ssh_key_file
      failed_when: not ssh_key_file.stat.exists or ssh_key_file.stat.size == 0